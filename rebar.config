%% == Cover ==

%% Whether to enable coverage reporting where commands support cover. Default
%% is `false'
{cover_enabled, true}.

%% Modules to exclude from cover
{cover_excl_mods, []}.

%% Options to pass to cover provider
{cover_opts, [verbose]}.


%% == Dependencies ==

%% What dependencies we have, dependencies can be of 3 forms, an application
%% name as an atom, eg. mochiweb, a name and a version (from the .app file), or
%% an application name, a version and the SCM details on how to fetch it (SCM
%% type, location and revision).
%% Rebar3 currently supports git and hg
{deps, [
    {edc,  ".*", {git, "https://github.com/ruanpienaar/edc.git", {branch, "master"}}},
    {ranch,".*", {git, "https://github.com/ninenines/ranch", {tag, "1.7.1"}}},
    {erlang_prometheus, ".*", {git, "https://github.com/ruanpienaar/erlang_prometheus", {branch, "master"}}}
]}.


%% == Dialyzer ==

{dialyzer, [
    {warnings, [underspecs, no_return]},
    {get_warnings, true},
    {plt_apps, top_level_deps}, % top_level_deps | all_deps
    {plt_extra_apps, []},
    {plt_location, local}, % local | "/my/file/name"
    {plt_prefix, "rebar3"},
    {base_plt_apps, [stdlib, kernel, crypto]},
    {base_plt_location, global}, % global | "/my/file/name"
    {base_plt_prefix, "rebar3"}
]}.


%% == Directories ==

%% directory for artifacts produced by rebar3
{base_dir, "_build"}.
%% directory in '<base_dir>/<profile>/' where deps go
{deps_dir, "lib"}.
%% where rebar3 operates from; defaults to the current working directory
{root_dir, "."}.
%% where checkout dependencies are to be located
{checkouts_dir, "_checkouts"}.
%% directory in '<base_dir>/<profile>/' where plugins go
{plugins_dir, "plugins"}.
%% directories where OTP applications for the project can be located
{project_app_dirs, ["apps/*", "lib/*", "."]}.
%% Directories where source files for an OTP application can be found
{src_dirs, ["src"]}.

{eunit_opts, [verbose]}.

{shell, [{apps, [
    kernel,
    stdlib,
    crypto,
    public_key,
    ssl,
    ranch,
    edc,
    eda
]}]}.

%% == xref ==

{xref_warnings, true}.

%% optional extra paths to include in xref:set_library_path/2.
%% specified relative location of rebar.config.
%% e.g. {xref_extra_paths,["../gtknode/src"]}
%% {xref_extra_paths,[]}.

%% xref checks to run
{xref_checks, [undefined_function_calls, undefined_functions,
               locals_not_used, exports_not_used,
               deprecated_function_calls, deprecated_functions]}.

%% Optional custom xref queries (xref manual has details) specified as
%%     {xref_queries, [{query_string(), expected_query_result()},...]}
%% The following for example removes all references to mod:*foo/4
%% functions from undefined external function calls as those are in a
%% generated module
%%{xref_queries,
%% [{"(XC - UC) || (XU - X - B"
%%   " - (\"mod\":\".*foo\"/\"4\"))",[]}]}.